using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace Quản_lý_sản_phẩm
{
    
    public partial class QLthongtinchung : Form
    {
        private Image ha;
        DataGridViewRow selectedRow;
        private Image HinhAnhMacDinh;
        /*
        private void SinhMa()
        {
            if (datahinhanh.Rows.Count > 1)
            {
                // Lấy ký tự đầu tiên của item được chọn trong comboBox và chuyển đổi thành chữ hoa
                string firstLetter = comboBox1.SelectedItem.ToString().Substring(0, 1).ToUpper();

                // Tạo mã sản phẩm mới bắt đầu từ 001
                int newNumber = 1;
                string newMaSP = firstLetter + newNumber.ToString("000"); // Định dạng mã sản phẩm để có 3 chữ số

                // Kiểm tra mã sản phẩm mới đã tồn tại trong danh sách hay chưa
                while (KiemTraTonTaiMaSP(newMaSP))
                {
                    newNumber++; // Tăng số lượng cho mã mới
                    newMaSP = firstLetter + newNumber.ToString("000"); // Tạo lại mã sản phẩm mới
                }

                // Hiển thị mã sản phẩm mới không trùng lặp trong TextBox
                MaSP.Text = newMaSP;
            }
            else
            {
                // Nếu không có hàng nào trong DataGridView, tạo mã sản phẩm đầu tiên
                MaSP.Text = "SP001"; // Sửa thành "SP001" để bắt đầu từ 001
            }
        }

        private bool KiemTraTonTaiMaSP(string maSP)
        {
            // Duyệt qua các hàng trong DataGridView để kiểm tra xem mã sản phẩm đã tồn tại hay chưa
            foreach (DataGridViewRow row in datahinhanh.Rows)
            {
                if (row.Cells[0].Value != null && row.Cells[0].Value.ToString() == maSP)
                {
                    return true; // Mã sản phẩm đã tồn tại
                }
            }
            return false; // Mã sản phẩm chưa tồn tại
        }
        */
        
        private void SinhMa()
        {
            if (datahinhanh.Rows.Count > 1)
            {
                // Lấy ký tự đầu tiên của item được chọn trong comboBox và chuyển đổi thành chữ hoa
                string Kitudau = comboBox1.SelectedItem.ToString().Substring(0, 1).ToUpper();

                // Lấy giá trị mã sản phẩm của hàng trước đó
                string previousValue = datahinhanh.Rows[datahinhanh.Rows.Count - 2].Cells[0].Value.ToString().Substring(1); // Sửa chỉ số substring từ 2 thành 1

                // Kiểm tra xem giá trị mã sản phẩm có thể chuyển đổi thành số nguyên hay không
                if (int.TryParse(previousValue, out int previousNumber))
                {
                    // Nếu có thể chuyển đổi, tăng giá trị lên 1 và tạo mã sản phẩm mới
                    int laysosinhma = previousNumber + 1;
                    MaSP.Text = Kitudau + laysosinhma.ToString("000"); // Định dạng mã sản phẩm để có 3 chữ số
                }
                else
                {
                    // Xử lý trường hợp không thể chuyển đổi giá trị thành số
                    // Ví dụ: Hiển thị một giá trị mặc định hoặc thông báo lỗi
                }
            }
            else
            {
                // Nếu không có hàng nào trong DataGridView, tạo mã sản phẩm đầu tiên
                MaSP.Text = "SP001"; // Sửa thành "SP001" để bắt đầu từ 001
            }
        }
        
        /*
        private void SinhMa()
        {
            if (datahinhanh.Rows.Count > 1)
            {
                // Lấy ký tự đầu tiên của item được chọn trong comboBox và chuyển đổi thành chữ hoa
                string firstLetter = comboBox1.SelectedItem.ToString().Substring(0, 1).ToUpper();

                // Lấy giá trị mã sản phẩm của hàng trước đó
                string previousValue = datahinhanh.Rows[datahinhanh.Rows.Count - 2].Cells[0].Value.ToString().Substring(2);

                // Kiểm tra xem giá trị mã sản phẩm có thể chuyển đổi thành số nguyên hay không
                if (int.TryParse(previousValue, out int previousNumber))
                {
                    // Nếu có thể chuyển đổi, tăng giá trị lên 1 và tạo mã sản phẩm mới
                    int laysosinhma = previousNumber + 1;
                    MaSP.Text = firstLetter + laysosinhma.ToString("000"); // Định dạng mã sản phẩm để có 3 chữ số
                }
                else
                {
                    // Xử lý trường hợp không thể chuyển đổi giá trị thành số
                    // Ví dụ: Hiển thị một giá trị mặc định hoặc thông báo lỗi
                }
            }
            else
            {
                // Nếu không có hàng nào trong DataGridView, tạo mã sản phẩm đầu tiên
                MaSP.Text = "SP001";
            }
        }


        /*
        private void SinhMa()
        {
            if (datahinhanh.Rows.Count > 1)
            {
                string firstLetter = comboBox1.SelectedItem.ToString().Substring(0, 1).ToUpper();
                //int laysosinhma = int.Parse(datahinhanh.Rows[datahinhanh.Rows.Count - 2].Cells[0].Value.ToString().Substring(2)) + 1;
                int laysosinhma = int.Parse(datahinhanh.Rows[datahinhanh.Rows.Count - 2].Cells[0].Value.ToString().Substring(2)) + 1;

                MaSP.Text = firstLetter + laysosinhma.ToString();
            }
            else
            {
                MaSP.Text = "SP001";
            }
        }

        /*
        public string Tangma()
        {
            // Đây là nơi bạn có thể thực hiện mã logic để sinh ra một mã sản phẩm
            // Ví dụ: sinh mã ngẫu nhiên
            Random rand = new Random();
            string MaSP = "SP" + rand.Next(1000, 9999); // Mã SP sẽ được tạo ngẫu nhiên từ SP1000 đến SP9999
            return MaSP;

        }
        */
        public QLthongtinchung()
        {
            InitializeComponent();
            datahinhanh.CellClick += dataGridView1_CellClick;
            loadData();
            SinhMa();
            timkiemtukhoa.Click += clearSearchTextBox_Click;
            //MaSP.Text = "SPxxxx";
            this.KeyPreview = true; // Bật KeyPreview

            this.KeyDown += Form1_KeyDown; // Thêm sự kiện KeyDown cho Form
            HinhAnhMacDinh = HinhAnh.Image;
        }
        private void Form1_KeyDown(object sender, KeyEventArgs e)
        {
            // Kiểm tra xem có đang nhấn phím Ctrl và phím H không
            if (e.Control && e.KeyCode == Keys.H)
            {
                // Mở hộp thoại chọn ảnh khi nhấn Ctrl + H
                OpenFileDialog file = new OpenFileDialog();
                file.Filter = "Chọn ảnh (*.jpg;*.png;*.gif)|*.jpg;*.png;*.gif";
                if (file.ShowDialog() == DialogResult.OK)
                {
                    HinhAnh.Image = Image.FromFile(file.FileName);
                }
            }
            if (e.KeyCode == Keys.Enter)
            {
                Product SP = new Product(MaSP.Text, tensp.Text, double.Parse(dongia.Text), donvitinh.Text, int.Parse(soluongton.Value.ToString()), HinhAnh);
                datahinhanh.Rows.Add(MaSP.Text, tensp.Text, double.Parse(dongia.Text), donvitinh.Text, int.Parse(soluongton.Value.ToString()), HinhAnh.Image);
                SinhMa();
            }
        }

        private void clearSearchTextBox_Click(object sender, EventArgs e)
        {
            // Xóa nội dung của TextBox timkiemtukhoa
            timkiemtukhoa.Text = "";
            foreach (DataGridViewRow row in datahinhanh.Rows)
            {
                row.Visible = true;
            }
        }

        private void button1_Click(object sender, EventArgs e)
        {
            MaSP.Clear();
            tensp.Clear();
            dongia.Clear();
            HinhAnh.Image = null; // Xóa ảnh trong PictureBox
            donvitinh.SelectedIndex = -1; // Clear selection
            soluongton.Value = 0; // Reset value
            tensp.Focus ();
            SinhMa();
            HinhAnh.Image = HinhAnhMacDinh;

        }


        private void luu_Click(object sender, EventArgs e)
        {
            /*
            string newMaSP = Tangma(); // Gọi phương thức Tangma() để sinh mã SP mới
            */
            Product SP = new Product(MaSP.Text,tensp.Text,double.Parse(dongia.Text),donvitinh.Text,int.Parse(soluongton.Value.ToString()), HinhAnh);
            datahinhanh.Rows.Add(MaSP.Text, tensp.Text, double.Parse(dongia.Text),donvitinh.Text, int.Parse(soluongton.Value.ToString()), HinhAnh.Image);
            SinhMa();

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void groupBox1_Enter(object sender, EventArgs e)
        {

        }
        private void xoaNhieu_Click(object sender, EventArgs e)
{
    // Kiểm tra xem có hàng được chọn không
    if (datahinhanh.SelectedRows.Count > 0)
    {
        // Hiển thị hộp thoại xác nhận
        DialogResult result = MessageBox.Show("Bạn có chắc chắn muốn xóa các sản phẩm đã chọn?", "Xác nhận xóa", MessageBoxButtons.YesNo);

        // Nếu người dùng chọn Yes
        if (result == DialogResult.Yes)
        {
            // Duyệt qua tất cả các hàng được chọn và loại bỏ chúng
            foreach (DataGridViewRow row in datahinhanh.SelectedRows)
            {
                datahinhanh.Rows.Remove(row);
            }
        }
    }
    else
    {
        MessageBox.Show("Vui lòng chọn sản phẩm để xóa.");
    }
}

        private void xoa_Click(object sender, EventArgs e)
        {
            // Đếm số dòng được chọn
            int selectedRowCount = datahinhanh.SelectedRows.Count;

            // Kiểm tra xem có hàng được chọn không
            if (selectedRowCount > 0)
            {
                // Hiển thị hộp thoại xác nhận
                DialogResult result = MessageBox.Show("Bạn có chắc chắn muốn xóa " + selectedRowCount + " sản phẩm đã chọn?", "Xác nhận xóa", MessageBoxButtons.YesNo);

                // Nếu người dùng chọn Yes
                if (result == DialogResult.Yes)
                {
                    // Duyệt qua tất cả các hàng được chọn và loại bỏ chúng
                    foreach (DataGridViewRow row in datahinhanh.SelectedRows)
                    {
                        datahinhanh.Rows.Remove(row);
                    }
                }
            }
            else
            {
                MessageBox.Show("Vui lòng chọn sản phẩm để xóa.");
            }
            /*
            // Kiểm tra xem có hàng được chọn không
            if (datahinhanh.SelectedRows.Count > 0)
            {
                // Hiển thị hộp thoại xác nhận
                DialogResult result = MessageBox.Show("Bạn có chắc chắn muốn xóa sản phẩm này?", "Xác nhận xóa", MessageBoxButtons.YesNo);

                // Nếu người dùng chọn Yes
                if (result == DialogResult.Yes)
                {
                    // Lấy hàng được chọn và loại bỏ nó
                    datahinhanh.Rows.Remove(datahinhanh.SelectedRows[0]);
                }
            }
            else
            {
                MessageBox.Show("Vui lòng chọn sản phẩm để xóa.");
            }
            /// cắt ngang
            // Kiểm tra xem có hàng được chọn không
            if (dataGridView1.SelectedRows.Count > 0)
            {
                // Lấy hàng được chọn và loại bỏ nó
                dataGridView1.Rows.Remove(dataGridView1.SelectedRows[0]);
            }
            else
            {
                MessageBox.Show("Vui lòng chọn sản phẩm để xóa.");
            }
            */
        }

        private void Capnhatdulieu(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void donglai_Click(object sender, EventArgs e)
        {
            Application.Exit();

        }

        private void HinhAnh_Click(object sender, EventArgs e)
        {
            /*OpenFileDialog openFileDialog = new OpenFileDialog();

            // Đặt các thuộc tính cho hộp thoại mở tệp
            openFileDialog.Title = "Chọn hình ảnh";
            openFileDialog.Filter = "Hình ảnh|*.jpg;*.jpeg;*.png;*.gif|Tất cả các tệp|*.*";
            openFileDialog.Multiselect = false; // Chỉ cho phép chọn một tệp

            // Hiển thị hộp thoại mở tệp
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                // Lấy đường dẫn đến tệp hình ảnh đã chọn
               // string selectedImagePath = openFileDialog.FileName;

                // Hiển thị hình ảnh trong PictureBox
                try
                {
                    // Load hình ảnh từ đường dẫn đã chọn và hiển thị trong PictureBox
                    HinhAnh.Image = Image.FromFile(openFileDialog.FileName);
                }
                catch (Exception ex)
                {
                    // Xử lý nếu có lỗi khi tải hình ảnh
                    MessageBox.Show("Không thể tải hình ảnh: " + ex.Message);
                }
            }*/
            OpenFileDialog file = new OpenFileDialog();
            file.Filter = " Chọn ảnh(*.jpg;*.png;*.gif)|*.jpg;*.png;*.gif";
            if (file.ShowDialog() == DialogResult.OK)
            {
                HinhAnh.Image = Image.FromFile(file.FileName);
            }
        }

        private void capnhat_Click(object sender, EventArgs e)
        {
            // Kiểm tra xem có hàng được chọn không
            if (datahinhanh.SelectedRows.Count > 0)
            {
                // Lấy dòng được chọn
                DataGridViewRow selectedRow = datahinhanh.SelectedRows[0];

                // Cập nhật dữ liệu của hàng được chọn với dữ liệu từ các control trên form
                selectedRow.Cells[0].Value = MaSP.Text;
                selectedRow.Cells[1].Value = tensp.Text;
                selectedRow.Cells[2].Value = double.Parse(dongia.Text);
                selectedRow.Cells[3].Value = donvitinh.Text;
                selectedRow.Cells[4].Value = int.Parse(soluongton.Value.ToString());
                selectedRow.Cells[5].Value = HinhAnh.Image;

                // Hiển thị thông báo thành công
                MessageBox.Show("Bạn đã cập nhật thành công.");
            }
            else
            {
                MessageBox.Show("Vui lòng chọn dòng bạn cần thay đổi dữ liệu.");
            }
        }


        private void clickchuotdgv(object sender, DataGridViewCellEventArgs e)
        {
        }

        private void dataGridView1_Click(object sender, EventArgs e)
        {
        }
        private void loadData()
        {
            datahinhanh.ReadOnly = true;

            //create a DataGridView Image Column
            DataGridViewImageColumn anh = new DataGridViewImageColumn();
            //set a header test to DataGridView Image Column
            anh.HeaderText = "Ảnh";
            anh.ImageLayout = DataGridViewImageCellLayout.Stretch;

            datahinhanh.Columns.Add(anh);

            //ptbHinhanh.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            datahinhanh.RowTemplate.Height = 40;
            //ptbHinhanh.AllowUserToAddRows = false;
        }
        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            // Kiểm tra xem có dòng được chọn không
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0 && datahinhanh.Rows[e.RowIndex].Cells[e.ColumnIndex].Value != null)
            {
                // Lấy dòng được chọn
                DataGridViewRow row = datahinhanh.Rows[e.RowIndex];

                // Hiển thị dữ liệu từ dòng được chọn vào các TextBox tương ứng
                MaSP.Text = row.Cells[0].Value.ToString();
                tensp.Text = row.Cells[1].Value.ToString();
                dongia.Text = row.Cells[2].Value.ToString();
                donvitinh.Text = row.Cells[3].Value.ToString();
                soluongton.Value = Convert.ToInt32(row.Cells[4].Value);
                ha = (Image)row.Cells[5].Value;
                HinhAnh.Image = ha;

            }
        }

        private void timkiem_Click(object sender, EventArgs e)
        {
            string keywordTenSP = timkiemtukhoa.Text.ToLower();

            bool foundRelatedItem = false;

            // Duyệt qua tất cả các hàng trong DataGridView
            foreach (DataGridViewRow row in datahinhanh.Rows)
            {
                // Lấy giá trị của cột tên sản phẩm từ hàng hiện tại
                object cellValue = row.Cells[1].Value;

                // Kiểm tra xem giá trị của ô có null hay không
                if (cellValue != null)
                {
                    string tenSP = cellValue.ToString().ToLower();

                    // Kiểm tra nếu tên sản phẩm chứa từ khóa tìm kiếm
                    if (tenSP.Contains(keywordTenSP))
                    {
                        // Hiển thị hàng chứa từ khóa tìm kiếm
                        row.Visible = true;

                        // Đặt biến kiểm tra thành true vì đã tìm thấy ít nhất một sản phẩm liên quan
                        foundRelatedItem = true;
                    }
                    else
                    {
                        // Ẩn các hàng không liên quan
                        row.Visible = false;
                    }
                }
            }

            // Nếu không tìm thấy sản phẩm liên quan
            if (!foundRelatedItem)
            {
                MessageBox.Show("Không tìm thấy sản phẩm.");
            }
        }


        private void MaSP_TextChanged(object sender, EventArgs e)
        {
            MaSP.Enabled = false;

        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void soluongton_ValueChanged(object sender, EventArgs e)
        {
            // soluongton
        }

        private void enterdeluu(object sender, EventArgs e)
        {

        }

        private void timkiemtukhoa_TextChanged(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (comboBox1.SelectedItem != null)
            {
                string firstLetter = comboBox1.SelectedItem.ToString().Substring(0, 1).ToUpper();
                MaSP.Text = firstLetter + "001";
            }
        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            timkiemtukhoa.Text = "";
            foreach (DataGridViewRow row in datahinhanh.Rows)
            {
                row.Visible = true;
            }
        }

        private void tensp_TextChanged(object sender, EventArgs e)
        {

        }
    }
    class Product
    {
        string MaSP;
        string tensp;
        double dongia;
        int soluongton;
        string donvitinh;
        object HinhAnh;
        public Product()
        {
            MaSP = "";
            tensp = "";
            dongia = 0;
            donvitinh = "";
            soluongton = 0;
            HinhAnh = "";

        }
        public Product(string maSP, string tenSp, double donGia,string donViTinh, int soLuongTon,  object hinhAnh)
        {
            MaSP = maSP;
            tensp = tenSp;
            dongia = donGia;
            donvitinh = donViTinh;
            soluongton = soLuongTon;

            HinhAnh = hinhAnh;
        }
    }
}
